00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 4/30/2019 7:17:50 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Homework 2 Question 3
00000000                             3  * Written by :William Nguyen
00000000                             4  * Date       :4/26/19
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000A000                  7  INPUT1   EQU $A000
00000000  =0000A001                  8  INPUT2 EQU $A001
00000000                             9  *Addr1 EQU $00006000
00000000                            10  *ADDSUM EQU $600
00000000                            11  
00000000                            12  *creating a list from $6000-8000
00000000                            13  *LIST    DC.W    $6000,$6001,$6002
00000000                            14  
00000000  =00006000                 15  ARR     EQU     $6000
00000000                            16  
00000000                            17  
00000000                            18  
00001000                            19      ORG    $1000
00001000                            20  START:                  ; first instruction of program
00001000                            21  
00001000                            22      *Intaking 2 numbers
00001000  103C 0005                 23      MOVE.B  #5,D0           *Trap # 5 in D0
00001004  4E4F                      24      TRAP    #15             *Read a number from the keyboard into D1.L. 
00001006  13C1 0000A000             25      MOVE.B  D1,$A000      
0000100C                            26      
0000100C                            27      *Converting values at $A000 and $A000 (2 individual characters) to hex
0000100C                            28      
0000100C                            29      *check if $A000 and $A001 are 41 - 46
0000100C                            30      
0000100C                            31      *else, assuming proper input, they are 30 - 39
0000100C                            32      
0000100C                            33      **layer check. first for check bottom. then check top (0-9)
0000100C                            34      **if higher than top, check top for A-F
0000100C                            35      
0000100C                            36  CHECK0
0000100C  0C39 0030 0000A000        37      CMP.B   #$30,(INPUT1)           Compares D1 to 30
00001014  6D00 010C                 38      BLT     INVALID         BLT branches if D1 is less than 30
00001018  0C39 0039 0000A000        39      CMP.B   #$39,(INPUT1)           Compares D1 to 40
00001020  6E00 0006                 40      BGT     CHECK1         BGT branches if D1 is greater than 39
00001024  6000 0012                 41      BRA     SUBNUM0
00001028                            42  
00001028                            43  
00001028                            44  CHECK1
00001028  0C39 0047 0000A000        45      CMP.B   #$47,(INPUT1)           Compares D1 to 47
00001030  6E00 00F0                 46      BGT     INVALID         BGT branches if D1 is greater than 46
00001034  6000 000E                 47      BRA     SUBLET0          
00001038                            48  
00001038                            49  SUBNUM0
00001038  0439 0030 0000A000        50      SUBI.B  #$30,INPUT1      Reduce to Binary equiv of 0-9
00001040  6000 0036                 51      BRA STFORA
00001044                            52  
00001044                            53  SUBLET0
00001044  0439 0037 0000A000        54      SUBI.B  #$37,INPUT1      Reduce to Binary equiv of A-F
0000104C  6000 002A                 55      BRA STFORA
00001050                            56  
00001050                            57  
00001050                            58  *byte data stored in memory between the addresses $6000 and $8000 
00001050                            59  *and compare it to the (byte) data at address $A000 
00001050                            60  *(hint: you can consider the memory between $6000 and $8000 an array).
00001050                            61  
00001050                            62  STFOR
00001050  7601                      63      MOVE.L  #1, D3
00001052  283C 000007D0             64      MOVE.L  #2000,D4
00001058  41F8 6000                 65      LEA     ARR,A0
0000105C  43F9 0000A000             66      LEA     INPUT1,A1
00001062  11FC 000A 6010            67      MOVE.B  #$0A,$6010
00001068                            68      
00001068                            69      
00001068  B803                      70  LOOP    CMP.B   D3,D4
0000106A  6700 004C                 71          BEQ     NEXT
0000106E                            72          *Execute loop code below
0000106E                            73          *compare each byte address to $A000
0000106E                            74          *If the same, store address into Addr1
0000106E  B2D8                      75          CMPA.W   (A0)+,A1
00001070  6700 003C                 76          BEQ     STORE
00001074                            77          
00001074                            78          
00001074  5283                      79          ADDQ.L  #1,D3
00001076  60F0                      80          BRA     LOOP    
00001078                            81  * SPLIT THIS INTO 2 PARTS of LOOP
00001078                            82  * Put the start and end location in registers
00001078                            83  * move addresses to data register and then compare
00001078                            84  * Increment address register separately (at end)
00001078                            85  
00001078                            86  * CMPA.B
00001078                            87  *i.e compare ($A000) to D3
00001078                            88  *need to clear just in case
00001078                            89  
00001078                            90  
00001078                            91  STFORA  *For Loop Preparations
00001078  7601                      92          MOVE.L  #1, D3
0000107A  283C 000007D0             93          MOVE.L  #2000,D4
00001080                            94          *Locations in address registers
00001080  47F8 6000                 95          LEA $00006000,A3
00001084  49F9 00008000             96          LEA $00008000,A4
0000108A                            97          *Example data to trigger
0000108A  11FC 000A 6005            98          MOVE.B  #$0A,$6005
00001090                            99          
00001090                           100          *Checking for loop
00001090  B803                     101  LOOPA   CMP.B   D3,D4
00001092  6700 0024                102          BEQ     NEXT
00001096                           103          *CLEAR D5 and D6 before moving
00001096  4245                     104          CLR     D5
00001098  4246                     105          CLR     D6
0000109A                           106          *Moving address registers of locations to data registers
0000109A  1A13                     107          MOVE.B  (A3),D5
0000109C  1C39 0000A000            108          MOVE.B  ($A000),D6
000010A2                           109          *comparing byte data of data registers
000010A2  BC05                     110          CMP.B   D5,D6
000010A4  6700 0008                111          BEQ     STORE
000010A8                           112          *Incrementing for loop
000010A8  5283                     113          ADDQ.L  #1,D3
000010AA                           114          *Incrementing address register location
000010AA  1A1B                     115          MOVE.B  (A3)+,D5
000010AC  60E2                     116          BRA     LOOPA
000010AE                           117          
000010AE                           118  
000010AE                           119  
000010AE                           120  
000010AE                           121          
000010AE                           122     
000010AE                           123  
000010AE                           124  *store address currently in A0 into Addr1
000010AE                           125  STORE   
000010AE  23CB 0000111C            126          MOVE.L A3,Addr1
000010B4  6000 0002                127          BRA   NEXT
000010B8                           128  
000010B8                           129  *For sum loops
000010B8                           130  *2 data registers corresponding to 2 address registers
000010B8                           131  *Intialize with (A1)+ and (A0)+
000010B8                           132  *Put both addresses into data registers
000010B8                           133  * sum in 2nd data register
000010B8                           134  * update 1st data register with new address
000010B8                           135  * re-sum in 2nd data register
000010B8                           136  
000010B8                           137  *Setting up loop for summation
000010B8  4243                     138  NEXT    CLR D3
000010BA  4244                     139          CLR D4
000010BC  4245                     140          CLR D5
000010BE  4246                     141          CLR D6
000010C0  7600                     142          MOVE.L  #0,D3
000010C2  283C 00000200            143          MOVE.L  #512,D4
000010C8                           144          *Loading addresses regarding
000010C8                           145          *Don't want LEA here?
000010C8                           146          *LEA     Addr1,A3
000010C8                           147          *LEA     Addr1,A4
000010C8  2679 0000111C            148          MOVE.L   Addr1,A3
000010CE  2879 0000111C            149          MOVE.L   Addr1,A4
000010D4                           150          *Need to maybe increment twice due to post-increment?
000010D4  1A1B                     151          MOVE.B  (A3)+,D5
000010D6                           152          
000010D6  1C14                     153          MOVE.B  (A4),D6 
000010D8                           154          **Invalid Addressing on Add.b, FIX THIS?!??!
000010D8                           155          *MOVEA.L Addr1,A0
000010D8                           156  
000010D8                           157  *Please define a WORD variable called address Addsum. 
000010D8                           158  *Add a series of bytes stored in the 512 consecutive memory locations 
000010D8                           159  *beginning at address Addr1, no matter you find the target data or not. 
000010D8                           160  *Save the sum value into Addsum.
000010D8                           161  *There is a chance that the sum might exceed $FFFF, 
000010D8                           162  *(exceeding the range of word value), so you will also need to store the carry bit 
000010D8                           163  *if an overflow occurs. Store the carry bit as a BYTE variable called CarryBit.
000010D8                           164  
000010D8                           165          *Check outer loop and move to fin if finished iterating
000010D8  B843                     166  SUM     CMP.W   D3,D4
000010DA  6700 000A                167          BEQ     FIN
000010DE                           168          *add current A3 byte value to D5. Post-Increment
000010DE  1A1B                     169          MOVE.B  (A3)+,D5
000010E0                           170          *Add Incrementing Address of D5 (A3) to D6
000010E0  DC45                     171          ADD.W   D5,D6
000010E2                           172          *Check for carry, set carry bit in subroutine
000010E2                           173          *Increment to 512
000010E2  5283                     174          ADDQ.L  #1,D3
000010E4                           175          *Loop to beginning of SUM
000010E4  60F2                     176          BRA     SUM
000010E6                           177  *ADD.B   (A0)+,ADDSUM
000010E6                           178  
000010E6                           179  *Need to set Addsum to equal D6 value
000010E6                           180  *Need to output Addr1, Addsum Value, a
000010E6  4E71                     181  FIN     NOP
000010E8                           182      
000010E8                           183  *add output of 3 values: Addr1, Addsum, and CarryBit    
000010E8                           184      
000010E8  =0000000D                185  CR      EQU     $0D         
000010E8  =0000000A                186  LF      EQU     $0A 
000010E8= 45 6E 74 65 72 20 ...    187  MESSAGE DC.B    'Enter a number: ',0
000010F9= 54 68 61 74 20 69 ...    188  INV     DC.B    'That is not between 30 and 46',CR,LF,0
00001119                           189  
0000111A= 0600                     190  ADDSUM DC.W    $0600
0000111C= 00006000                 191  Addr1  DC.L    $00006000
00001120                           192  
00001120= 01                       193  CarryBit DC.B   $01
00001122  43F8 10F9                194  INVALID LEA     INV,A1
00001126  103C 000E                195          MOVE.B  #14,D0  
0000112A  4E4F                     196          TRAP    #15
0000112C  6000 0002                197          BRA     DONE
00001130                           198          
00001130  103C 0009                199  DONE    MOVE.B  #9,D0
00001134  4E4F                     200          TRAP    #15 
00001136                           201  
00001136  FFFF FFFF                202      SIMHALT             ; halt simulator
0000113A                           203      
0000113A                           204  * Put variables and constants here
0000113A                           205  
0000113A                           206      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               111C
ADDSUM              111A
ARR                 6000
CARRYBIT            1120
CHECK0              100C
CHECK1              1028
CR                  D
DONE                1130
FIN                 10E6
INPUT1              A000
INPUT2              A001
INV                 10F9
INVALID             1122
LF                  A
LOOP                1068
LOOPA               1090
MESSAGE             10E8
NEXT                10B8
START               1000
STFOR               1050
STFORA              1078
STORE               10AE
SUBLET0             1044
SUBNUM0             1038
SUM                 10D8
